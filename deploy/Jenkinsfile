pipeline {
    agent any

  stages {

     stage("Initial cleanup") {
          steps {
            dir("${WORKSPACE}") {
              deleteDir()
            }
          }
        }

    stage('Checkout SCM') {
      steps {
            git branch: 'main', url: 'https://github.com/enyioman/php-todo.git'
      }
    }

    stage('Prepare Dependencies') {
      steps {
             sh 'mv .env.sample .env'
             sh 'composer install'
             sh 'php artisan migrate'
             sh 'php artisan db:seed'
             sh 'php artisan key:generate'
      }
    }
    stage('Execute Unit Tests') {
    steps {
           sh './vendor/bin/phpunit'
    }
  }
}




// pipeline {
//   agent any

//   environment {
//       ANSIBLE_CONFIG="${WORKSPACE}/deploy/ansible.cfg"
//     }
    
//   stages{
//       stage("Initial cleanup") {
//           steps {
//             dir("${WORKSPACE}") {
//               deleteDir()
//             }
//           }
//         }

//       stage('Checkout SCM') {
//          steps{
//             git branch: 'main', credentialsId: '25d43c7a-dd94-4ae8-9328-3f340af3429f', url: 'https://github.com/enyioman/ansible-config-mgt.git'
//          }
//        }
//        stage('Prepare Ansible For Execution') {
//         steps {
//           sh 'echo ${WORKSPACE}'
//          }
//       }
//       stage('Run Ansible playbook') {
//         steps {
//            ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory/dev', playbook: 'playbooks/site.yml'
//          }
//       }

//       stage('Clean Workspace after build'){
//         steps{
//           cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
//         }
//       }
//    }
// }
